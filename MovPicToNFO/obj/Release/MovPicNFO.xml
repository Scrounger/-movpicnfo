<?xml version="1.0"?>
<doc>
<assembly>
<name>
MovPicNFO
</name>
</assembly>
<members>
<member name="P:MovPicNFO.My.Resources.Resources.ResourceManager">
	<summary>
  Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
</summary>
</member><member name="P:MovPicNFO.My.Resources.Resources.Culture">
	<summary>
  Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
  Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
</summary>
</member><member name="T:MovPicNFO.My.Resources.Resources">
	<summary>
  Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
</summary>
</member><member name="F:MovPicNFO.MyLog.LogType.Debug">
	<summary>
 Debug logging
 </summary>
</member><member name="F:MovPicNFO.MyLog.LogType.Info">
	<summary>
 normal logging
 </summary>
</member><member name="F:MovPicNFO.MyLog.LogType.Warn">
	<summary>
 normal logging
 </summary>
</member><member name="F:MovPicNFO.MyLog.LogType.Error">
	<summary>
 error logging
 </summary>
</member><member name="F:MovPicNFO.MyLog._logDaysToKeep">
	<summary>
 Configure after how many days the log file shall be rotated when a new line is added
 </summary>
</member><member name="F:MovPicNFO.MyLog._maxLogSizeMb">
	<summary>
 The maximum size of each log file in Megabytes
 </summary>
</member><member name="F:MovPicNFO.MyLog._maxRepetitions">
	<summary>
 The maximum count of identic messages to be logged in a row
 </summary>
</member><member name="F:MovPicNFO.MyLog._lastLogLines">
	<summary>
 The last log n lines to compare for repeated entries.
 </summary>
</member><member name="M:MovPicNFO.MyLog.#ctor">
	<summary>
 Private singleton constructor . Do not allow any instance of this class.
 </summary>
</member><member name="M:MovPicNFO.MyLog.#cctor">
	<summary>
 Static constructor
 </summary>
</member><member name="M:MovPicNFO.MyLog.BackupLogFiles">
	<summary>
 Backups the log files.
 </summary>
</member><member name="M:MovPicNFO.MyLog.Write(System.Exception)">
	<summary>
 Writes the specified exception to the log file
 </summary>
	<param name="ex">The ex.</param>
</member><member name="M:MovPicNFO.MyLog.SafeString(System.String)">
	<summary>
 Replaces a password inside the string by stars
 </summary>
	<param name="Logtext">String to replace</param>
	<returns>String without password</returns>
</member><member name="M:MovPicNFO.MyLog.Write(System.String,System.Object[])">
	<summary>
 Write a string to the logfile.
 </summary>
	<param name="format">The format of the string.</param>
	<param name="arg">An array containing the actual data of the string.</param>
</member><member name="M:MovPicNFO.MyLog.Error(System.String,System.Object[])">
	<summary>
 Logs the message to the error file
 </summary>
	<param name="format">The format.</param>
	<param name="arg">The arg.</param>
</member><member name="M:MovPicNFO.MyLog.Info(System.String,System.Object[])">
	<summary>
 Logs the message to the info file
 </summary>
	<param name="format">The format.</param>
	<param name="arg">The arg.</param>
</member><member name="M:MovPicNFO.MyLog.Debug(System.String,System.Object[])">
	<summary>
 Logs the message to the debug file
 </summary>
	<param name="format">The format.</param>
	<param name="arg">The arg.</param>
</member><member name="M:MovPicNFO.MyLog.WriteFile(System.String,System.Object[])">
	<summary>
 Logs the message to the info file
 </summary>
	<param name="format">The format.</param>
	<param name="arg">The arg.</param>
</member><member name="M:MovPicNFO.MyLog.GetPathName">
	<summary>
 Returns the path the Application data location
</summary>
	<returns>Application data path of TvServer</returns>
</member><member name="M:MovPicNFO.MyLog.CreateBlankFile(System.String)">
	<summary>
 Since Windows caches API calls to the FileSystem a simple FileInfo.CreationTime will be wrong when replacing files (even after refresh).
 Therefore we set it manually.
 </summary>
	<param name="aFileName"></param>
</member><member name="M:MovPicNFO.MyLog.RotateLogs">
	<summary>
 Deletes .bak file, moves .log to .bak for every LogType
 </summary>
</member><member name="M:MovPicNFO.MyLog.IsRepetition(System.IComparable{System.String})">
	<summary>
 Compares the cache's last log entries to check whether we have repeating lines that should not be logged
 </summary>
	<param name="aLogLine">A new log line</param>
	<returns>True if the cache only contains the exact lines as given by parameter</returns>
</member><member name="M:MovPicNFO.MyLog.CheckLogPrepared(System.String)">
	<summary>
 Does pre-logging tasks - like check for rotation, oversize, etc
 </summary>
	<param name="aLogFileName">The file to be checked</param>
	<returns>False if logging must not go on</returns>
</member><member name="M:MovPicNFO.MyLog.WriteToFile(MovPicNFO.MyLog.LogType,System.String,System.Object[])">
	<summary>
 Writes the file.
 </summary>
	<param name="logType">the type of logging.</param>
	<param name="format">The format.</param>
	<param name="arg">The arg.</param>
</member><member name="T:MovPicNFO.MyLog">
	<summary>
 An implementation of a log mechanism for the GUI library.
 </summary>
</member>
</members>
</doc>